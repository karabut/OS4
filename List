#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <stdbool.h>

#define END '.'
#define ADDERROR -1

typedef struct Node{
 char* line;
 struct Node* next;
}Node;

typedef struct List{
    Node* first;
    Node* last;
}List;

int add(List* list, char* value){
    Node* newNode = (Node*)malloc(sizeof(Node));
    if(newNode == NULL){
        return ADDERROR;
    }
    newNode->next = NULL;
    newNode->line = (char*)malloc(strlen(value) + 1);
    strcpy(newNode->line, value);
    if(list->last != NULL || list->first != NULL){
        list->last->next = newNode;
    } else if(list->last == NULL || list->first == NULL){
            list->first = newNode;
        } else{
        return ADDERROR;
    }
    list->last = newNode;
    return EXIT_SUCCESS;
}

void clean(List* list){
    if(list == NULL){
        return;
    }
    if(list->first != NULL){
        Node* current = list->first;
        Node* next;
        while(current != NULL){
            next = current->next;
            free(current->line);
            free(current);
            current = next;
        }
    }
    free(list);
}

List* create(){
    List * list = (List*)malloc(sizeof(List));
    if(list != NULL){
        list->first = NULL;
        list->last = NULL;
    }
    return list;
}

void print(List* list){
    if(list == NULL){
        printf("NULL \n");
    }
    if(list->first != NULL){
        Node* current = list->first;
        while(current != NULL){
            printf("%s ", current->line);
            current = current->next;
        }
    } else {
        printf("Empty list \n");
    }
}

int main() {
    char buf[BUFSIZ];
    List *list = create();
    if (list == NULL) {
        perror("Error at creating list");
        return 0;
    }
    while(true){
        char *result = fgets(buf, BUFSIZ, stdin);
        if (result == NULL) {
                perror("Error at reading next line");
            break;
        }
        if (buf[0] == END) {
            break;
        }
        int check = add(list, buf);
        if (check == ADDERROR) {
            perror("Error at adding element");
            break;
        }
    };
    print(list);
    clean(list);
    return 0;
}
